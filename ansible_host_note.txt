- Chạy lần lượt n host 1 lần
 Sử dụng directive serial

 - name: upgrade packages on servers behind load balancer
    hosts: myhosts
    serial: 1
    tasks:
 Để xác định số lần fail ansible sẽ dừng lại sử dụng directive: max_fail_percentage
 - name: upgrade packages on servers behind load balancer
    hosts: myhosts
    serial: 1
    max_fail_percentage: 25
 Trong tường hợp có 4 node , nếu 1 host fail thì sẽ không dừng lại, nếu 2 node fail sẽ dừng lại 

 - Chạy chỉ 1 lần
   - name: run the database migrations
    command: /opt/run_migrations
    run_once: true
    
    Hoặc chạy local_cation nếu muốn chạy local_task chỉ 1 lần
    - name: run the task locally, only once
    local_action: command /opt/my-custom-command
    run_once: true

- Xử lý khi behavior là changed hoặc failed 
    Đặt được khi nào thì trạng thái là changed, khi nào là failed
    - name: initialize the database
        django_manage:
        command: createdb --noinput --nodata
            app_path: "{{ proj_path }}"
            virtualenv: "{{ venv_path }}"
        register: result
        changed_when: not result.failed and "Creating tables" in result.out
        failed_when: result.failed and "Database already created" not in result.msg
    DB là changed khi result k phải là failed và result.out có dòng Creating tables
    DB là failed khi result là failed và không có chuỗi "Database already created" trong result.out

- Lấy ip từ host 
    Với variable {{ ansible_eth1.ipv4.address }} lấy được địa chỉ ipv4 của eth1 

- Mã hóa sensitive information 
    + ansible-vault encrypt <tefile>.yml 

    Hoặc sử dụng eate
    + ansible-vault create <tefile>.yml 
    ansible sẽ hỏi password , sau đó đùng editor cỉnh sửa file

- Pattern cho hosts
    All hosts           all
    All hosts           *
    Union               dev:staging
    Intersection        staging:&database
    Exclusion           dev:!queue
    Wildcard            *.example.com
    Range of            web[5:10]
    numbered servers 
    Regular expression  ~web\d \.example\.(com
    So far, the host parameter in our plays has specified a single host or group, like this:
        hosts: web
    Instead of specifying a single host or group, you can specify a pattern. So far, we’ve
    seen the all pattern, which lets will run a play against all known hosts:
        hosts: all
    You can specify a union of two groups with a colon. To specify all dev and staging
    machines:
        hosts: dev:staging
    You can specify an intersection using colon ampersand. For example, to specify all of
    the database servers in your staging environment, you might do:
        hosts: staging:&database

- Giới gạn Host run 
    ansible-playbook -l hosts playbook.yml
    hoặc
    ansible-playbook -l 'staging:&database' playbook.yml

- Filter 
    + filter cho Registered Variables
    Với mỗi command thì khi láy két quả trả về thì sẽ thể filter như sau:
    - name: Run myprog
        command: /opt/myprog
        register: result
        ignore_errors: True
    - debug: var=result
    - debug: msg="Stop running the playbook if myprog failed"
    failed_when: result|failed
    result có 4 trạng thái : failed,changed,success,skipped

    + Filter file path 
    vars:
        homepage: /usr/share/nginx/html/index.html
    tasks:
    - name: copy home page
        copy: src=files/{{ homepage | basename }} dest={{ homepage }}
    {{ homepage | basename }} sẽ lấy được giá trị là index.html   
    
    + Custom filter 
    Đây là custom filter của Jinja2 
    ALLOWED_HOSTS = [{{ domains|surround_by_quote|join(", ") }}]
    Tạo custom filter bằng cách tạo folder filter_plugins, nằm trong folder chạy playbook
    file filter_plugins/surround_by_quotes.py
    ~~~~
    def surround_by_quote(a_list):
        return ['"%s"' % an_element for an_element in a_list]

    class FilterModule(object):
        def filters(self):
            return {'surround_by_quote': surround_by_quote}
    ~~~~
    Plugin có thể đặt trong folder /usr/share/ansible_plugins/filter_plugins,
    hoặc chỉ định trong biến môi trường ANSIBLE_FILTER_PLUGINS

- Look up: công vụ đọc các thông tin từ nhiều nguồn khác nhau : file,pipe,envt,password, csv
    + Lookup File 
    Ví dụ lấy key public ssh sau đó copy đến file authorized_keys
    File authorized_keys.j2
    ~~~~
    {{ lookup('file', '/Users/lorinhochstein/.ssh/id_rsa.pub') }}
    ~~~~

    Task 
    ~~~~ 
    - name: copy authorized_host file
    template: src=authorized_keys.j2 dest=/home/deploy/.ssh/authorized_keys
    ~~~~

    + Lookup pipe
    - name: get SHA of most recent commit
    debug: msg="{{ lookup('pipe', 'git rev-parse HEAD') }}"

    + Look up environment
    - name: get the current shell
    debug: msg="{{ lookup('env', 'SHELL') }}"

    + Look up password
    create a Post‐
    create a Post‐gres user named deploy with a random password and 
    write that password to deploy-password.txt on the control machine, we could do:
    - name: create deploy postgres user
    postgresql_user:
    name: deploy
    password: "{{ lookup('password', 'deploy-password.txt') }}"

    + Lookup templates
    File message.j2
    This host runs {{ ansible_distribution }}

    Task:
    - name: output message from template
    debug: msg="{{ lookup('template', 'message.j2') }}"

    + Lookup csvfile
    File : users.csv
    username,email
    lorin,lorin@ansiblebook.com
    john,john@example.com
    sue,sue@example.org

    Tasks
    lookup('csvfile', 'sue file=users.csv delimiter=, col=1')

    + Lookup dnstxt
    - name: look up TXT record
    debug: msg="{{ lookup('dnstxt', 'ansiblebook.com') }}"

    + Owner Lookup
    • The lookup_plugins directory next to your playbook
    • /usr/share/ansible_plugins/lookup_plugins
    • The directory specified in your ANSIBLE_LOOKUP_PLUGINS environment variable

- Các vòng loop 
    